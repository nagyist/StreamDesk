// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace StreamDesk.Database {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class StreamDeskSettings {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_Favorite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Favorite, global::StreamDesk.Database.Favorite.Builder> internal__static_StreamDesk_Database_Favorite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_FavoritesFolder__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.FavoritesFolder, global::StreamDesk.Database.FavoritesFolder.Builder> internal__static_StreamDesk_Database_FavoritesFolder__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_Settings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Settings, global::StreamDesk.Database.Settings.Builder> internal__static_StreamDesk_Database_Settings__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static StreamDeskSettings() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChhTdHJlYW1EZXNrU2V0dGluZ3MucHJvdG8SE1N0cmVhbURlc2suRGF0YWJh" + 
          "c2UiJgoIRmF2b3JpdGUSDAoEbmFtZRgBIAIoCRIMCgR1dWlkGAIgAigJIosB" + 
          "Cg9GYXZvcml0ZXNGb2xkZXISDAoEbmFtZRgBIAIoCRI4CgpzdWJGb2xkZXJz" + 
          "GAIgAygLMiQuU3RyZWFtRGVzay5EYXRhYmFzZS5GYXZvcml0ZXNGb2xkZXIS" + 
          "MAoJZmF2b3JpdGVzGAMgAygLMh0uU3RyZWFtRGVzay5EYXRhYmFzZS5GYXZv" + 
          "cml0ZSJECghTZXR0aW5ncxI4Cgpyb290Rm9sZGVyGAEgAigLMiQuU3RyZWFt" + 
          "RGVzay5EYXRhYmFzZS5GYXZvcml0ZXNGb2xkZXI=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_StreamDesk_Database_Favorite__Descriptor = Descriptor.MessageTypes[0];
        internal__static_StreamDesk_Database_Favorite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Favorite, global::StreamDesk.Database.Favorite.Builder>(internal__static_StreamDesk_Database_Favorite__Descriptor,
                new string[] { "Name", "Uuid", });
        internal__static_StreamDesk_Database_FavoritesFolder__Descriptor = Descriptor.MessageTypes[1];
        internal__static_StreamDesk_Database_FavoritesFolder__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.FavoritesFolder, global::StreamDesk.Database.FavoritesFolder.Builder>(internal__static_StreamDesk_Database_FavoritesFolder__Descriptor,
                new string[] { "Name", "SubFolders", "Favorites", });
        internal__static_StreamDesk_Database_Settings__Descriptor = Descriptor.MessageTypes[2];
        internal__static_StreamDesk_Database_Settings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Settings, global::StreamDesk.Database.Settings.Builder>(internal__static_StreamDesk_Database_Settings__Descriptor,
                new string[] { "RootFolder", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Favorite : pb::GeneratedMessage<Favorite, Favorite.Builder> {
    private Favorite() { }
    private static readonly Favorite defaultInstance = new Favorite().MakeReadOnly();
    private static readonly string[] _favoriteFieldNames = new string[] { "name", "uuid" };
    private static readonly uint[] _favoriteFieldTags = new uint[] { 10, 18 };
    public static Favorite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Favorite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Favorite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDeskSettings.internal__static_StreamDesk_Database_Favorite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Favorite, Favorite.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDeskSettings.internal__static_StreamDesk_Database_Favorite__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int UuidFieldNumber = 2;
    private bool hasUuid;
    private string uuid_ = "";
    public bool HasUuid {
      get { return hasUuid; }
    }
    public string Uuid {
      get { return uuid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasUuid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _favoriteFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasUuid) {
        output.WriteString(2, field_names[1], Uuid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Uuid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Favorite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Favorite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Favorite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Favorite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Favorite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Favorite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Favorite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Favorite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Favorite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Favorite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Favorite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Favorite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Favorite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Favorite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Favorite result;
      
      private Favorite PrepareBuilder() {
        if (resultIsReadOnly) {
          Favorite original = result;
          result = new Favorite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Favorite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.Favorite.Descriptor; }
      }
      
      public override Favorite DefaultInstanceForType {
        get { return global::StreamDesk.Database.Favorite.DefaultInstance; }
      }
      
      public override Favorite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Favorite) {
          return MergeFrom((Favorite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Favorite other) {
        if (other == global::StreamDesk.Database.Favorite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasUuid) {
          Uuid = other.Uuid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_favoriteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _favoriteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasUuid = input.ReadString(ref result.uuid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasUuid {
        get { return result.hasUuid; }
      }
      public string Uuid {
        get { return result.Uuid; }
        set { SetUuid(value); }
      }
      public Builder SetUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder ClearUuid() {
        PrepareBuilder();
        result.hasUuid = false;
        result.uuid_ = "";
        return this;
      }
    }
    static Favorite() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDeskSettings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FavoritesFolder : pb::GeneratedMessage<FavoritesFolder, FavoritesFolder.Builder> {
    private FavoritesFolder() { }
    private static readonly FavoritesFolder defaultInstance = new FavoritesFolder().MakeReadOnly();
    private static readonly string[] _favoritesFolderFieldNames = new string[] { "favorites", "name", "subFolders" };
    private static readonly uint[] _favoritesFolderFieldTags = new uint[] { 26, 10, 18 };
    public static FavoritesFolder DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FavoritesFolder DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FavoritesFolder ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDeskSettings.internal__static_StreamDesk_Database_FavoritesFolder__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FavoritesFolder, FavoritesFolder.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDeskSettings.internal__static_StreamDesk_Database_FavoritesFolder__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SubFoldersFieldNumber = 2;
    private pbc::PopsicleList<global::StreamDesk.Database.FavoritesFolder> subFolders_ = new pbc::PopsicleList<global::StreamDesk.Database.FavoritesFolder>();
    public scg::IList<global::StreamDesk.Database.FavoritesFolder> SubFoldersList {
      get { return subFolders_; }
    }
    public int SubFoldersCount {
      get { return subFolders_.Count; }
    }
    public global::StreamDesk.Database.FavoritesFolder GetSubFolders(int index) {
      return subFolders_[index];
    }
    
    public const int FavoritesFieldNumber = 3;
    private pbc::PopsicleList<global::StreamDesk.Database.Favorite> favorites_ = new pbc::PopsicleList<global::StreamDesk.Database.Favorite>();
    public scg::IList<global::StreamDesk.Database.Favorite> FavoritesList {
      get { return favorites_; }
    }
    public int FavoritesCount {
      get { return favorites_.Count; }
    }
    public global::StreamDesk.Database.Favorite GetFavorites(int index) {
      return favorites_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        foreach (global::StreamDesk.Database.FavoritesFolder element in SubFoldersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::StreamDesk.Database.Favorite element in FavoritesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _favoritesFolderFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (subFolders_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], subFolders_);
      }
      if (favorites_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], favorites_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        foreach (global::StreamDesk.Database.FavoritesFolder element in SubFoldersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::StreamDesk.Database.Favorite element in FavoritesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FavoritesFolder ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FavoritesFolder ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FavoritesFolder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FavoritesFolder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FavoritesFolder MakeReadOnly() {
      subFolders_.MakeReadOnly();
      favorites_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FavoritesFolder prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FavoritesFolder, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FavoritesFolder cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FavoritesFolder result;
      
      private FavoritesFolder PrepareBuilder() {
        if (resultIsReadOnly) {
          FavoritesFolder original = result;
          result = new FavoritesFolder();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FavoritesFolder MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.FavoritesFolder.Descriptor; }
      }
      
      public override FavoritesFolder DefaultInstanceForType {
        get { return global::StreamDesk.Database.FavoritesFolder.DefaultInstance; }
      }
      
      public override FavoritesFolder BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FavoritesFolder) {
          return MergeFrom((FavoritesFolder) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FavoritesFolder other) {
        if (other == global::StreamDesk.Database.FavoritesFolder.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.subFolders_.Count != 0) {
          result.subFolders_.Add(other.subFolders_);
        }
        if (other.favorites_.Count != 0) {
          result.favorites_.Add(other.favorites_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_favoritesFolderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _favoritesFolderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.subFolders_, global::StreamDesk.Database.FavoritesFolder.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.favorites_, global::StreamDesk.Database.Favorite.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.FavoritesFolder> SubFoldersList {
        get { return PrepareBuilder().subFolders_; }
      }
      public int SubFoldersCount {
        get { return result.SubFoldersCount; }
      }
      public global::StreamDesk.Database.FavoritesFolder GetSubFolders(int index) {
        return result.GetSubFolders(index);
      }
      public Builder SetSubFolders(int index, global::StreamDesk.Database.FavoritesFolder value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subFolders_[index] = value;
        return this;
      }
      public Builder SetSubFolders(int index, global::StreamDesk.Database.FavoritesFolder.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subFolders_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSubFolders(global::StreamDesk.Database.FavoritesFolder value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subFolders_.Add(value);
        return this;
      }
      public Builder AddSubFolders(global::StreamDesk.Database.FavoritesFolder.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subFolders_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSubFolders(scg::IEnumerable<global::StreamDesk.Database.FavoritesFolder> values) {
        PrepareBuilder();
        result.subFolders_.Add(values);
        return this;
      }
      public Builder ClearSubFolders() {
        PrepareBuilder();
        result.subFolders_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.Favorite> FavoritesList {
        get { return PrepareBuilder().favorites_; }
      }
      public int FavoritesCount {
        get { return result.FavoritesCount; }
      }
      public global::StreamDesk.Database.Favorite GetFavorites(int index) {
        return result.GetFavorites(index);
      }
      public Builder SetFavorites(int index, global::StreamDesk.Database.Favorite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.favorites_[index] = value;
        return this;
      }
      public Builder SetFavorites(int index, global::StreamDesk.Database.Favorite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.favorites_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFavorites(global::StreamDesk.Database.Favorite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.favorites_.Add(value);
        return this;
      }
      public Builder AddFavorites(global::StreamDesk.Database.Favorite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.favorites_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFavorites(scg::IEnumerable<global::StreamDesk.Database.Favorite> values) {
        PrepareBuilder();
        result.favorites_.Add(values);
        return this;
      }
      public Builder ClearFavorites() {
        PrepareBuilder();
        result.favorites_.Clear();
        return this;
      }
    }
    static FavoritesFolder() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDeskSettings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Settings : pb::GeneratedMessage<Settings, Settings.Builder> {
    private Settings() { }
    private static readonly Settings defaultInstance = new Settings().MakeReadOnly();
    private static readonly string[] _settingsFieldNames = new string[] { "rootFolder" };
    private static readonly uint[] _settingsFieldTags = new uint[] { 10 };
    public static Settings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Settings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Settings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDeskSettings.internal__static_StreamDesk_Database_Settings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Settings, Settings.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDeskSettings.internal__static_StreamDesk_Database_Settings__FieldAccessorTable; }
    }
    
    public const int RootFolderFieldNumber = 1;
    private bool hasRootFolder;
    private global::StreamDesk.Database.FavoritesFolder rootFolder_;
    public bool HasRootFolder {
      get { return hasRootFolder; }
    }
    public global::StreamDesk.Database.FavoritesFolder RootFolder {
      get { return rootFolder_ ?? global::StreamDesk.Database.FavoritesFolder.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRootFolder) return false;
        if (!RootFolder.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _settingsFieldNames;
      if (hasRootFolder) {
        output.WriteMessage(1, field_names[0], RootFolder);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRootFolder) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, RootFolder);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Settings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Settings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Settings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Settings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Settings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Settings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Settings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Settings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Settings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Settings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Settings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Settings result;
      
      private Settings PrepareBuilder() {
        if (resultIsReadOnly) {
          Settings original = result;
          result = new Settings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Settings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.Settings.Descriptor; }
      }
      
      public override Settings DefaultInstanceForType {
        get { return global::StreamDesk.Database.Settings.DefaultInstance; }
      }
      
      public override Settings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Settings) {
          return MergeFrom((Settings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Settings other) {
        if (other == global::StreamDesk.Database.Settings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRootFolder) {
          MergeRootFolder(other.RootFolder);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_settingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _settingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::StreamDesk.Database.FavoritesFolder.Builder subBuilder = global::StreamDesk.Database.FavoritesFolder.CreateBuilder();
              if (result.hasRootFolder) {
                subBuilder.MergeFrom(RootFolder);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RootFolder = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRootFolder {
       get { return result.hasRootFolder; }
      }
      public global::StreamDesk.Database.FavoritesFolder RootFolder {
        get { return result.RootFolder; }
        set { SetRootFolder(value); }
      }
      public Builder SetRootFolder(global::StreamDesk.Database.FavoritesFolder value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRootFolder = true;
        result.rootFolder_ = value;
        return this;
      }
      public Builder SetRootFolder(global::StreamDesk.Database.FavoritesFolder.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRootFolder = true;
        result.rootFolder_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRootFolder(global::StreamDesk.Database.FavoritesFolder value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRootFolder &&
            result.rootFolder_ != global::StreamDesk.Database.FavoritesFolder.DefaultInstance) {
            result.rootFolder_ = global::StreamDesk.Database.FavoritesFolder.CreateBuilder(result.rootFolder_).MergeFrom(value).BuildPartial();
        } else {
          result.rootFolder_ = value;
        }
        result.hasRootFolder = true;
        return this;
      }
      public Builder ClearRootFolder() {
        PrepareBuilder();
        result.hasRootFolder = false;
        result.rootFolder_ = null;
        return this;
      }
    }
    static Settings() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDeskSettings.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
