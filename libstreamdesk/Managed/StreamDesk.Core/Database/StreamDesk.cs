// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace StreamDesk.Database {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class StreamDesk {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_StreamDeskProperty__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamDeskProperty, global::StreamDesk.Database.StreamDeskProperty.Builder> internal__static_StreamDesk_Database_StreamDeskProperty__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_StreamEmbed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamEmbed, global::StreamDesk.Database.StreamEmbed.Builder> internal__static_StreamDesk_Database_StreamEmbed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_ChatEmbed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.ChatEmbed, global::StreamDesk.Database.ChatEmbed.Builder> internal__static_StreamDesk_Database_ChatEmbed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_StreamSize__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamSize, global::StreamDesk.Database.StreamSize.Builder> internal__static_StreamDesk_Database_StreamSize__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_Stream__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Stream, global::StreamDesk.Database.Stream.Builder> internal__static_StreamDesk_Database_Stream__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_Provider__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Provider, global::StreamDesk.Database.Provider.Builder> internal__static_StreamDesk_Database_Provider__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StreamDesk_Database_StreamDeskDatabase__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamDeskDatabase, global::StreamDesk.Database.StreamDeskDatabase.Builder> internal__static_StreamDesk_Database_StreamDeskDatabase__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static StreamDesk() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBTdHJlYW1EZXNrLnByb3RvEhNTdHJlYW1EZXNrLkRhdGFiYXNlIjEKElN0" + 
          "cmVhbURlc2tQcm9wZXJ0eRIMCgRuYW1lGAEgAigJEg0KBXZhbHVlGAIgAigJ" + 
          "IkYKC1N0cmVhbUVtYmVkEgwKBG5hbWUYASACKAkSFAoMZnJpZW5kbHlOYW1l" + 
          "GAIgAigJEhMKC2VtYmVkRm9ybWF0GAMgAigJIlcKCUNoYXRFbWJlZBIMCgRu" + 
          "YW1lGAEgAigJEhQKDGZyaWVuZGx5TmFtZRgCIAIoCRITCgtlbWJlZEZvcm1h" + 
          "dBgDIAIoCRIRCglpcmNTZXJ2ZXIYBCABKAkiKwoKU3RyZWFtU2l6ZRINCgV3" + 
          "aWR0aBgBIAIoBRIOCgZoZWlnaHQYAiACKAUixAIKBlN0cmVhbRIMCgRuYW1l" + 
          "GAEgAigJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEgsKA3VybBgDIAEoCRIMCgR1" + 
          "dWlkGAQgAigJEhEKCWNoYXRFbWJlZBgFIAIoCRITCgtzdHJlYW1FbWJlZBgG" + 
          "IAIoCRIOCgZwaW5uZWQYByACKAgSLQoEc2l6ZRgIIAIoCzIfLlN0cmVhbURl" + 
          "c2suRGF0YWJhc2UuU3RyZWFtU2l6ZRJCChFjaGF0RW1iZWRQcm9wZXJ0eRgJ" + 
          "IAMoCzInLlN0cmVhbURlc2suRGF0YWJhc2UuU3RyZWFtRGVza1Byb3BlcnR5" + 
          "EkQKE3N0cmVhbUVtYmVkUHJvcGVydHkYCiADKAsyJy5TdHJlYW1EZXNrLkRh" + 
          "dGFiYXNlLlN0cmVhbURlc2tQcm9wZXJ0eRILCgN0YWcYCyADKAkirAEKCFBy" + 
          "b3ZpZGVyEgwKBG5hbWUYASACKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSCwoD" + 
          "dXJsGAMgASgJEg4KBnBpbm5lZBgEIAIoCBIyCgtzdWJQcm92aWRlchgFIAMo" + 
          "CzIdLlN0cmVhbURlc2suRGF0YWJhc2UuUHJvdmlkZXISLAoHc3RyZWFtcxgG" + 
          "IAMoCzIbLlN0cmVhbURlc2suRGF0YWJhc2UuU3RyZWFtIuEBChJTdHJlYW1E" + 
          "ZXNrRGF0YWJhc2USDAoEbmFtZRgBIAIoCRIPCgdjcmVhdG9yGAIgAigJEhMK" + 
          "C2Rlc2NyaXB0aW9uGAMgAigJEisKBHJvb3QYBCACKAsyHS5TdHJlYW1EZXNr" + 
          "LkRhdGFiYXNlLlByb3ZpZGVyEjYKDHN0cmVhbUVtYmVkcxgFIAMoCzIgLlN0" + 
          "cmVhbURlc2suRGF0YWJhc2UuU3RyZWFtRW1iZWQSMgoKY2hhdEVtYmVkcxgG" + 
          "IAMoCzIeLlN0cmVhbURlc2suRGF0YWJhc2UuQ2hhdEVtYmVk");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_StreamDesk_Database_StreamDeskProperty__Descriptor = Descriptor.MessageTypes[0];
        internal__static_StreamDesk_Database_StreamDeskProperty__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamDeskProperty, global::StreamDesk.Database.StreamDeskProperty.Builder>(internal__static_StreamDesk_Database_StreamDeskProperty__Descriptor,
                new string[] { "Name", "Value", });
        internal__static_StreamDesk_Database_StreamEmbed__Descriptor = Descriptor.MessageTypes[1];
        internal__static_StreamDesk_Database_StreamEmbed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamEmbed, global::StreamDesk.Database.StreamEmbed.Builder>(internal__static_StreamDesk_Database_StreamEmbed__Descriptor,
                new string[] { "Name", "FriendlyName", "EmbedFormat", });
        internal__static_StreamDesk_Database_ChatEmbed__Descriptor = Descriptor.MessageTypes[2];
        internal__static_StreamDesk_Database_ChatEmbed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.ChatEmbed, global::StreamDesk.Database.ChatEmbed.Builder>(internal__static_StreamDesk_Database_ChatEmbed__Descriptor,
                new string[] { "Name", "FriendlyName", "EmbedFormat", "IrcServer", });
        internal__static_StreamDesk_Database_StreamSize__Descriptor = Descriptor.MessageTypes[3];
        internal__static_StreamDesk_Database_StreamSize__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamSize, global::StreamDesk.Database.StreamSize.Builder>(internal__static_StreamDesk_Database_StreamSize__Descriptor,
                new string[] { "Width", "Height", });
        internal__static_StreamDesk_Database_Stream__Descriptor = Descriptor.MessageTypes[4];
        internal__static_StreamDesk_Database_Stream__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Stream, global::StreamDesk.Database.Stream.Builder>(internal__static_StreamDesk_Database_Stream__Descriptor,
                new string[] { "Name", "Description", "Url", "Uuid", "ChatEmbed", "StreamEmbed", "Pinned", "Size", "ChatEmbedProperty", "StreamEmbedProperty", "Tag", });
        internal__static_StreamDesk_Database_Provider__Descriptor = Descriptor.MessageTypes[5];
        internal__static_StreamDesk_Database_Provider__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.Provider, global::StreamDesk.Database.Provider.Builder>(internal__static_StreamDesk_Database_Provider__Descriptor,
                new string[] { "Name", "Description", "Url", "Pinned", "SubProvider", "Streams", });
        internal__static_StreamDesk_Database_StreamDeskDatabase__Descriptor = Descriptor.MessageTypes[6];
        internal__static_StreamDesk_Database_StreamDeskDatabase__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StreamDesk.Database.StreamDeskDatabase, global::StreamDesk.Database.StreamDeskDatabase.Builder>(internal__static_StreamDesk_Database_StreamDeskDatabase__Descriptor,
                new string[] { "Name", "Creator", "Description", "Root", "StreamEmbeds", "ChatEmbeds", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamDeskProperty : pb::GeneratedMessage<StreamDeskProperty, StreamDeskProperty.Builder> {
    private StreamDeskProperty() { }
    private static readonly StreamDeskProperty defaultInstance = new StreamDeskProperty().MakeReadOnly();
    private static readonly string[] _streamDeskPropertyFieldNames = new string[] { "name", "value" };
    private static readonly uint[] _streamDeskPropertyFieldTags = new uint[] { 10, 18 };
    public static StreamDeskProperty DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamDeskProperty DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamDeskProperty ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamDeskProperty__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamDeskProperty, StreamDeskProperty.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamDeskProperty__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamDeskPropertyFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamDeskProperty ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamDeskProperty ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamDeskProperty ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamDeskProperty ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamDeskProperty MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamDeskProperty prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamDeskProperty, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamDeskProperty cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamDeskProperty result;
      
      private StreamDeskProperty PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamDeskProperty original = result;
          result = new StreamDeskProperty();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamDeskProperty MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.StreamDeskProperty.Descriptor; }
      }
      
      public override StreamDeskProperty DefaultInstanceForType {
        get { return global::StreamDesk.Database.StreamDeskProperty.DefaultInstance; }
      }
      
      public override StreamDeskProperty BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamDeskProperty) {
          return MergeFrom((StreamDeskProperty) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamDeskProperty other) {
        if (other == global::StreamDesk.Database.StreamDeskProperty.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamDeskPropertyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamDeskPropertyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static StreamDeskProperty() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamEmbed : pb::GeneratedMessage<StreamEmbed, StreamEmbed.Builder> {
    private StreamEmbed() { }
    private static readonly StreamEmbed defaultInstance = new StreamEmbed().MakeReadOnly();
    private static readonly string[] _streamEmbedFieldNames = new string[] { "embedFormat", "friendlyName", "name" };
    private static readonly uint[] _streamEmbedFieldTags = new uint[] { 26, 18, 10 };
    public static StreamEmbed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamEmbed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamEmbed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamEmbed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamEmbed, StreamEmbed.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamEmbed__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int FriendlyNameFieldNumber = 2;
    private bool hasFriendlyName;
    private string friendlyName_ = "";
    public bool HasFriendlyName {
      get { return hasFriendlyName; }
    }
    public string FriendlyName {
      get { return friendlyName_; }
    }
    
    public const int EmbedFormatFieldNumber = 3;
    private bool hasEmbedFormat;
    private string embedFormat_ = "";
    public bool HasEmbedFormat {
      get { return hasEmbedFormat; }
    }
    public string EmbedFormat {
      get { return embedFormat_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasFriendlyName) return false;
        if (!hasEmbedFormat) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamEmbedFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[2], Name);
      }
      if (hasFriendlyName) {
        output.WriteString(2, field_names[1], FriendlyName);
      }
      if (hasEmbedFormat) {
        output.WriteString(3, field_names[0], EmbedFormat);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasFriendlyName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FriendlyName);
        }
        if (hasEmbedFormat) {
          size += pb::CodedOutputStream.ComputeStringSize(3, EmbedFormat);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamEmbed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamEmbed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamEmbed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamEmbed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamEmbed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamEmbed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamEmbed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamEmbed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamEmbed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamEmbed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamEmbed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamEmbed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamEmbed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamEmbed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamEmbed result;
      
      private StreamEmbed PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamEmbed original = result;
          result = new StreamEmbed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamEmbed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.StreamEmbed.Descriptor; }
      }
      
      public override StreamEmbed DefaultInstanceForType {
        get { return global::StreamDesk.Database.StreamEmbed.DefaultInstance; }
      }
      
      public override StreamEmbed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamEmbed) {
          return MergeFrom((StreamEmbed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamEmbed other) {
        if (other == global::StreamDesk.Database.StreamEmbed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasFriendlyName) {
          FriendlyName = other.FriendlyName;
        }
        if (other.HasEmbedFormat) {
          EmbedFormat = other.EmbedFormat;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamEmbedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamEmbedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasFriendlyName = input.ReadString(ref result.friendlyName_);
              break;
            }
            case 26: {
              result.hasEmbedFormat = input.ReadString(ref result.embedFormat_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasFriendlyName {
        get { return result.hasFriendlyName; }
      }
      public string FriendlyName {
        get { return result.FriendlyName; }
        set { SetFriendlyName(value); }
      }
      public Builder SetFriendlyName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendlyName = true;
        result.friendlyName_ = value;
        return this;
      }
      public Builder ClearFriendlyName() {
        PrepareBuilder();
        result.hasFriendlyName = false;
        result.friendlyName_ = "";
        return this;
      }
      
      public bool HasEmbedFormat {
        get { return result.hasEmbedFormat; }
      }
      public string EmbedFormat {
        get { return result.EmbedFormat; }
        set { SetEmbedFormat(value); }
      }
      public Builder SetEmbedFormat(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmbedFormat = true;
        result.embedFormat_ = value;
        return this;
      }
      public Builder ClearEmbedFormat() {
        PrepareBuilder();
        result.hasEmbedFormat = false;
        result.embedFormat_ = "";
        return this;
      }
    }
    static StreamEmbed() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChatEmbed : pb::GeneratedMessage<ChatEmbed, ChatEmbed.Builder> {
    private ChatEmbed() { }
    private static readonly ChatEmbed defaultInstance = new ChatEmbed().MakeReadOnly();
    private static readonly string[] _chatEmbedFieldNames = new string[] { "embedFormat", "friendlyName", "ircServer", "name" };
    private static readonly uint[] _chatEmbedFieldTags = new uint[] { 26, 18, 34, 10 };
    public static ChatEmbed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChatEmbed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChatEmbed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_ChatEmbed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChatEmbed, ChatEmbed.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_ChatEmbed__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int FriendlyNameFieldNumber = 2;
    private bool hasFriendlyName;
    private string friendlyName_ = "";
    public bool HasFriendlyName {
      get { return hasFriendlyName; }
    }
    public string FriendlyName {
      get { return friendlyName_; }
    }
    
    public const int EmbedFormatFieldNumber = 3;
    private bool hasEmbedFormat;
    private string embedFormat_ = "";
    public bool HasEmbedFormat {
      get { return hasEmbedFormat; }
    }
    public string EmbedFormat {
      get { return embedFormat_; }
    }
    
    public const int IrcServerFieldNumber = 4;
    private bool hasIrcServer;
    private string ircServer_ = "";
    public bool HasIrcServer {
      get { return hasIrcServer; }
    }
    public string IrcServer {
      get { return ircServer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasFriendlyName) return false;
        if (!hasEmbedFormat) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _chatEmbedFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasFriendlyName) {
        output.WriteString(2, field_names[1], FriendlyName);
      }
      if (hasEmbedFormat) {
        output.WriteString(3, field_names[0], EmbedFormat);
      }
      if (hasIrcServer) {
        output.WriteString(4, field_names[2], IrcServer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasFriendlyName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FriendlyName);
        }
        if (hasEmbedFormat) {
          size += pb::CodedOutputStream.ComputeStringSize(3, EmbedFormat);
        }
        if (hasIrcServer) {
          size += pb::CodedOutputStream.ComputeStringSize(4, IrcServer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChatEmbed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatEmbed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatEmbed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatEmbed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatEmbed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatEmbed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChatEmbed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChatEmbed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChatEmbed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatEmbed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChatEmbed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChatEmbed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChatEmbed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChatEmbed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChatEmbed result;
      
      private ChatEmbed PrepareBuilder() {
        if (resultIsReadOnly) {
          ChatEmbed original = result;
          result = new ChatEmbed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChatEmbed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.ChatEmbed.Descriptor; }
      }
      
      public override ChatEmbed DefaultInstanceForType {
        get { return global::StreamDesk.Database.ChatEmbed.DefaultInstance; }
      }
      
      public override ChatEmbed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChatEmbed) {
          return MergeFrom((ChatEmbed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChatEmbed other) {
        if (other == global::StreamDesk.Database.ChatEmbed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasFriendlyName) {
          FriendlyName = other.FriendlyName;
        }
        if (other.HasEmbedFormat) {
          EmbedFormat = other.EmbedFormat;
        }
        if (other.HasIrcServer) {
          IrcServer = other.IrcServer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_chatEmbedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _chatEmbedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasFriendlyName = input.ReadString(ref result.friendlyName_);
              break;
            }
            case 26: {
              result.hasEmbedFormat = input.ReadString(ref result.embedFormat_);
              break;
            }
            case 34: {
              result.hasIrcServer = input.ReadString(ref result.ircServer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasFriendlyName {
        get { return result.hasFriendlyName; }
      }
      public string FriendlyName {
        get { return result.FriendlyName; }
        set { SetFriendlyName(value); }
      }
      public Builder SetFriendlyName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendlyName = true;
        result.friendlyName_ = value;
        return this;
      }
      public Builder ClearFriendlyName() {
        PrepareBuilder();
        result.hasFriendlyName = false;
        result.friendlyName_ = "";
        return this;
      }
      
      public bool HasEmbedFormat {
        get { return result.hasEmbedFormat; }
      }
      public string EmbedFormat {
        get { return result.EmbedFormat; }
        set { SetEmbedFormat(value); }
      }
      public Builder SetEmbedFormat(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmbedFormat = true;
        result.embedFormat_ = value;
        return this;
      }
      public Builder ClearEmbedFormat() {
        PrepareBuilder();
        result.hasEmbedFormat = false;
        result.embedFormat_ = "";
        return this;
      }
      
      public bool HasIrcServer {
        get { return result.hasIrcServer; }
      }
      public string IrcServer {
        get { return result.IrcServer; }
        set { SetIrcServer(value); }
      }
      public Builder SetIrcServer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIrcServer = true;
        result.ircServer_ = value;
        return this;
      }
      public Builder ClearIrcServer() {
        PrepareBuilder();
        result.hasIrcServer = false;
        result.ircServer_ = "";
        return this;
      }
    }
    static ChatEmbed() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamSize : pb::GeneratedMessage<StreamSize, StreamSize.Builder> {
    private StreamSize() { }
    private static readonly StreamSize defaultInstance = new StreamSize().MakeReadOnly();
    private static readonly string[] _streamSizeFieldNames = new string[] { "height", "width" };
    private static readonly uint[] _streamSizeFieldTags = new uint[] { 16, 8 };
    public static StreamSize DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamSize DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamSize ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamSize__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamSize, StreamSize.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamSize__FieldAccessorTable; }
    }
    
    public const int WidthFieldNumber = 1;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 2;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWidth) return false;
        if (!hasHeight) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamSizeFieldNames;
      if (hasWidth) {
        output.WriteInt32(1, field_names[1], Width);
      }
      if (hasHeight) {
        output.WriteInt32(2, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamSize ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamSize ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamSize ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamSize ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamSize ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamSize ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamSize ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamSize ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamSize ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamSize ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamSize MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamSize prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamSize, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamSize cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamSize result;
      
      private StreamSize PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamSize original = result;
          result = new StreamSize();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamSize MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.StreamSize.Descriptor; }
      }
      
      public override StreamSize DefaultInstanceForType {
        get { return global::StreamDesk.Database.StreamSize.DefaultInstance; }
      }
      
      public override StreamSize BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamSize) {
          return MergeFrom((StreamSize) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamSize other) {
        if (other == global::StreamDesk.Database.StreamSize.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamSizeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamSizeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 16: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static StreamSize() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Stream : pb::GeneratedMessage<Stream, Stream.Builder> {
    private Stream() { }
    private static readonly Stream defaultInstance = new Stream().MakeReadOnly();
    private static readonly string[] _streamFieldNames = new string[] { "chatEmbed", "chatEmbedProperty", "description", "name", "pinned", "size", "streamEmbed", "streamEmbedProperty", "tag", "url", "uuid" };
    private static readonly uint[] _streamFieldTags = new uint[] { 42, 74, 18, 10, 56, 66, 50, 82, 90, 26, 34 };
    public static Stream DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Stream DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Stream ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_Stream__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Stream, Stream.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_Stream__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int UrlFieldNumber = 3;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int UuidFieldNumber = 4;
    private bool hasUuid;
    private string uuid_ = "";
    public bool HasUuid {
      get { return hasUuid; }
    }
    public string Uuid {
      get { return uuid_; }
    }
    
    public const int ChatEmbedFieldNumber = 5;
    private bool hasChatEmbed;
    private string chatEmbed_ = "";
    public bool HasChatEmbed {
      get { return hasChatEmbed; }
    }
    public string ChatEmbed {
      get { return chatEmbed_; }
    }
    
    public const int StreamEmbedFieldNumber = 6;
    private bool hasStreamEmbed;
    private string streamEmbed_ = "";
    public bool HasStreamEmbed {
      get { return hasStreamEmbed; }
    }
    public string StreamEmbed {
      get { return streamEmbed_; }
    }
    
    public const int PinnedFieldNumber = 7;
    private bool hasPinned;
    private bool pinned_;
    public bool HasPinned {
      get { return hasPinned; }
    }
    public bool Pinned {
      get { return pinned_; }
    }
    
    public const int SizeFieldNumber = 8;
    private bool hasSize;
    private global::StreamDesk.Database.StreamSize size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::StreamDesk.Database.StreamSize Size {
      get { return size_ ?? global::StreamDesk.Database.StreamSize.DefaultInstance; }
    }
    
    public const int ChatEmbedPropertyFieldNumber = 9;
    private pbc::PopsicleList<global::StreamDesk.Database.StreamDeskProperty> chatEmbedProperty_ = new pbc::PopsicleList<global::StreamDesk.Database.StreamDeskProperty>();
    public scg::IList<global::StreamDesk.Database.StreamDeskProperty> ChatEmbedPropertyList {
      get { return chatEmbedProperty_; }
    }
    public int ChatEmbedPropertyCount {
      get { return chatEmbedProperty_.Count; }
    }
    public global::StreamDesk.Database.StreamDeskProperty GetChatEmbedProperty(int index) {
      return chatEmbedProperty_[index];
    }
    
    public const int StreamEmbedPropertyFieldNumber = 10;
    private pbc::PopsicleList<global::StreamDesk.Database.StreamDeskProperty> streamEmbedProperty_ = new pbc::PopsicleList<global::StreamDesk.Database.StreamDeskProperty>();
    public scg::IList<global::StreamDesk.Database.StreamDeskProperty> StreamEmbedPropertyList {
      get { return streamEmbedProperty_; }
    }
    public int StreamEmbedPropertyCount {
      get { return streamEmbedProperty_.Count; }
    }
    public global::StreamDesk.Database.StreamDeskProperty GetStreamEmbedProperty(int index) {
      return streamEmbedProperty_[index];
    }
    
    public const int TagFieldNumber = 11;
    private pbc::PopsicleList<string> tag_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TagList {
      get { return pbc::Lists.AsReadOnly(tag_); }
    }
    public int TagCount {
      get { return tag_.Count; }
    }
    public string GetTag(int index) {
      return tag_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasUuid) return false;
        if (!hasChatEmbed) return false;
        if (!hasStreamEmbed) return false;
        if (!hasPinned) return false;
        if (!hasSize) return false;
        if (!Size.IsInitialized) return false;
        foreach (global::StreamDesk.Database.StreamDeskProperty element in ChatEmbedPropertyList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::StreamDesk.Database.StreamDeskProperty element in StreamEmbedPropertyList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[2], Description);
      }
      if (hasUrl) {
        output.WriteString(3, field_names[9], Url);
      }
      if (hasUuid) {
        output.WriteString(4, field_names[10], Uuid);
      }
      if (hasChatEmbed) {
        output.WriteString(5, field_names[0], ChatEmbed);
      }
      if (hasStreamEmbed) {
        output.WriteString(6, field_names[6], StreamEmbed);
      }
      if (hasPinned) {
        output.WriteBool(7, field_names[4], Pinned);
      }
      if (hasSize) {
        output.WriteMessage(8, field_names[5], Size);
      }
      if (chatEmbedProperty_.Count > 0) {
        output.WriteMessageArray(9, field_names[1], chatEmbedProperty_);
      }
      if (streamEmbedProperty_.Count > 0) {
        output.WriteMessageArray(10, field_names[7], streamEmbedProperty_);
      }
      if (tag_.Count > 0) {
        output.WriteStringArray(11, field_names[8], tag_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Description);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Url);
        }
        if (hasUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Uuid);
        }
        if (hasChatEmbed) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ChatEmbed);
        }
        if (hasStreamEmbed) {
          size += pb::CodedOutputStream.ComputeStringSize(6, StreamEmbed);
        }
        if (hasPinned) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Pinned);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Size);
        }
        foreach (global::StreamDesk.Database.StreamDeskProperty element in ChatEmbedPropertyList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        foreach (global::StreamDesk.Database.StreamDeskProperty element in StreamEmbedPropertyList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        {
          int dataSize = 0;
          foreach (string element in TagList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * tag_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Stream ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stream ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stream ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stream ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stream ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stream ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Stream ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Stream ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Stream ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stream ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Stream MakeReadOnly() {
      chatEmbedProperty_.MakeReadOnly();
      streamEmbedProperty_.MakeReadOnly();
      tag_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Stream prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Stream, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Stream cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Stream result;
      
      private Stream PrepareBuilder() {
        if (resultIsReadOnly) {
          Stream original = result;
          result = new Stream();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Stream MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.Stream.Descriptor; }
      }
      
      public override Stream DefaultInstanceForType {
        get { return global::StreamDesk.Database.Stream.DefaultInstance; }
      }
      
      public override Stream BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Stream) {
          return MergeFrom((Stream) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Stream other) {
        if (other == global::StreamDesk.Database.Stream.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasUuid) {
          Uuid = other.Uuid;
        }
        if (other.HasChatEmbed) {
          ChatEmbed = other.ChatEmbed;
        }
        if (other.HasStreamEmbed) {
          StreamEmbed = other.StreamEmbed;
        }
        if (other.HasPinned) {
          Pinned = other.Pinned;
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        if (other.chatEmbedProperty_.Count != 0) {
          result.chatEmbedProperty_.Add(other.chatEmbedProperty_);
        }
        if (other.streamEmbedProperty_.Count != 0) {
          result.streamEmbedProperty_.Add(other.streamEmbedProperty_);
        }
        if (other.tag_.Count != 0) {
          result.tag_.Add(other.tag_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 26: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 34: {
              result.hasUuid = input.ReadString(ref result.uuid_);
              break;
            }
            case 42: {
              result.hasChatEmbed = input.ReadString(ref result.chatEmbed_);
              break;
            }
            case 50: {
              result.hasStreamEmbed = input.ReadString(ref result.streamEmbed_);
              break;
            }
            case 56: {
              result.hasPinned = input.ReadBool(ref result.pinned_);
              break;
            }
            case 66: {
              global::StreamDesk.Database.StreamSize.Builder subBuilder = global::StreamDesk.Database.StreamSize.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.chatEmbedProperty_, global::StreamDesk.Database.StreamDeskProperty.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.streamEmbedProperty_, global::StreamDesk.Database.StreamDeskProperty.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              input.ReadStringArray(tag, field_name, result.tag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasUuid {
        get { return result.hasUuid; }
      }
      public string Uuid {
        get { return result.Uuid; }
        set { SetUuid(value); }
      }
      public Builder SetUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder ClearUuid() {
        PrepareBuilder();
        result.hasUuid = false;
        result.uuid_ = "";
        return this;
      }
      
      public bool HasChatEmbed {
        get { return result.hasChatEmbed; }
      }
      public string ChatEmbed {
        get { return result.ChatEmbed; }
        set { SetChatEmbed(value); }
      }
      public Builder SetChatEmbed(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatEmbed = true;
        result.chatEmbed_ = value;
        return this;
      }
      public Builder ClearChatEmbed() {
        PrepareBuilder();
        result.hasChatEmbed = false;
        result.chatEmbed_ = "";
        return this;
      }
      
      public bool HasStreamEmbed {
        get { return result.hasStreamEmbed; }
      }
      public string StreamEmbed {
        get { return result.StreamEmbed; }
        set { SetStreamEmbed(value); }
      }
      public Builder SetStreamEmbed(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStreamEmbed = true;
        result.streamEmbed_ = value;
        return this;
      }
      public Builder ClearStreamEmbed() {
        PrepareBuilder();
        result.hasStreamEmbed = false;
        result.streamEmbed_ = "";
        return this;
      }
      
      public bool HasPinned {
        get { return result.hasPinned; }
      }
      public bool Pinned {
        get { return result.Pinned; }
        set { SetPinned(value); }
      }
      public Builder SetPinned(bool value) {
        PrepareBuilder();
        result.hasPinned = true;
        result.pinned_ = value;
        return this;
      }
      public Builder ClearPinned() {
        PrepareBuilder();
        result.hasPinned = false;
        result.pinned_ = false;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::StreamDesk.Database.StreamSize Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::StreamDesk.Database.StreamSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::StreamDesk.Database.StreamSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::StreamDesk.Database.StreamSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSize &&
            result.size_ != global::StreamDesk.Database.StreamSize.DefaultInstance) {
            result.size_ = global::StreamDesk.Database.StreamSize.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
        }
        result.hasSize = true;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.StreamDeskProperty> ChatEmbedPropertyList {
        get { return PrepareBuilder().chatEmbedProperty_; }
      }
      public int ChatEmbedPropertyCount {
        get { return result.ChatEmbedPropertyCount; }
      }
      public global::StreamDesk.Database.StreamDeskProperty GetChatEmbedProperty(int index) {
        return result.GetChatEmbedProperty(index);
      }
      public Builder SetChatEmbedProperty(int index, global::StreamDesk.Database.StreamDeskProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.chatEmbedProperty_[index] = value;
        return this;
      }
      public Builder SetChatEmbedProperty(int index, global::StreamDesk.Database.StreamDeskProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.chatEmbedProperty_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChatEmbedProperty(global::StreamDesk.Database.StreamDeskProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.chatEmbedProperty_.Add(value);
        return this;
      }
      public Builder AddChatEmbedProperty(global::StreamDesk.Database.StreamDeskProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.chatEmbedProperty_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChatEmbedProperty(scg::IEnumerable<global::StreamDesk.Database.StreamDeskProperty> values) {
        PrepareBuilder();
        result.chatEmbedProperty_.Add(values);
        return this;
      }
      public Builder ClearChatEmbedProperty() {
        PrepareBuilder();
        result.chatEmbedProperty_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.StreamDeskProperty> StreamEmbedPropertyList {
        get { return PrepareBuilder().streamEmbedProperty_; }
      }
      public int StreamEmbedPropertyCount {
        get { return result.StreamEmbedPropertyCount; }
      }
      public global::StreamDesk.Database.StreamDeskProperty GetStreamEmbedProperty(int index) {
        return result.GetStreamEmbedProperty(index);
      }
      public Builder SetStreamEmbedProperty(int index, global::StreamDesk.Database.StreamDeskProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.streamEmbedProperty_[index] = value;
        return this;
      }
      public Builder SetStreamEmbedProperty(int index, global::StreamDesk.Database.StreamDeskProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.streamEmbedProperty_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStreamEmbedProperty(global::StreamDesk.Database.StreamDeskProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.streamEmbedProperty_.Add(value);
        return this;
      }
      public Builder AddStreamEmbedProperty(global::StreamDesk.Database.StreamDeskProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.streamEmbedProperty_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStreamEmbedProperty(scg::IEnumerable<global::StreamDesk.Database.StreamDeskProperty> values) {
        PrepareBuilder();
        result.streamEmbedProperty_.Add(values);
        return this;
      }
      public Builder ClearStreamEmbedProperty() {
        PrepareBuilder();
        result.streamEmbedProperty_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> TagList {
        get { return PrepareBuilder().tag_; }
      }
      public int TagCount {
        get { return result.TagCount; }
      }
      public string GetTag(int index) {
        return result.GetTag(index);
      }
      public Builder SetTag(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tag_[index] = value;
        return this;
      }
      public Builder AddTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tag_.Add(value);
        return this;
      }
      public Builder AddRangeTag(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tag_.Add(values);
        return this;
      }
      public Builder ClearTag() {
        PrepareBuilder();
        result.tag_.Clear();
        return this;
      }
    }
    static Stream() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Provider : pb::GeneratedMessage<Provider, Provider.Builder> {
    private Provider() { }
    private static readonly Provider defaultInstance = new Provider().MakeReadOnly();
    private static readonly string[] _providerFieldNames = new string[] { "description", "name", "pinned", "streams", "subProvider", "url" };
    private static readonly uint[] _providerFieldTags = new uint[] { 18, 10, 32, 50, 42, 26 };
    public static Provider DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Provider DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Provider ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_Provider__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Provider, Provider.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_Provider__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int UrlFieldNumber = 3;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int PinnedFieldNumber = 4;
    private bool hasPinned;
    private bool pinned_;
    public bool HasPinned {
      get { return hasPinned; }
    }
    public bool Pinned {
      get { return pinned_; }
    }
    
    public const int SubProviderFieldNumber = 5;
    private pbc::PopsicleList<global::StreamDesk.Database.Provider> subProvider_ = new pbc::PopsicleList<global::StreamDesk.Database.Provider>();
    public scg::IList<global::StreamDesk.Database.Provider> SubProviderList {
      get { return subProvider_; }
    }
    public int SubProviderCount {
      get { return subProvider_.Count; }
    }
    public global::StreamDesk.Database.Provider GetSubProvider(int index) {
      return subProvider_[index];
    }
    
    public const int StreamsFieldNumber = 6;
    private pbc::PopsicleList<global::StreamDesk.Database.Stream> streams_ = new pbc::PopsicleList<global::StreamDesk.Database.Stream>();
    public scg::IList<global::StreamDesk.Database.Stream> StreamsList {
      get { return streams_; }
    }
    public int StreamsCount {
      get { return streams_.Count; }
    }
    public global::StreamDesk.Database.Stream GetStreams(int index) {
      return streams_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasPinned) return false;
        foreach (global::StreamDesk.Database.Provider element in SubProviderList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::StreamDesk.Database.Stream element in StreamsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _providerFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[0], Description);
      }
      if (hasUrl) {
        output.WriteString(3, field_names[5], Url);
      }
      if (hasPinned) {
        output.WriteBool(4, field_names[2], Pinned);
      }
      if (subProvider_.Count > 0) {
        output.WriteMessageArray(5, field_names[4], subProvider_);
      }
      if (streams_.Count > 0) {
        output.WriteMessageArray(6, field_names[3], streams_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Description);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Url);
        }
        if (hasPinned) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Pinned);
        }
        foreach (global::StreamDesk.Database.Provider element in SubProviderList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::StreamDesk.Database.Stream element in StreamsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Provider ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Provider ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Provider ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Provider ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Provider ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Provider ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Provider ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Provider ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Provider ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Provider ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Provider MakeReadOnly() {
      subProvider_.MakeReadOnly();
      streams_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Provider prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Provider, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Provider cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Provider result;
      
      private Provider PrepareBuilder() {
        if (resultIsReadOnly) {
          Provider original = result;
          result = new Provider();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Provider MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.Provider.Descriptor; }
      }
      
      public override Provider DefaultInstanceForType {
        get { return global::StreamDesk.Database.Provider.DefaultInstance; }
      }
      
      public override Provider BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Provider) {
          return MergeFrom((Provider) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Provider other) {
        if (other == global::StreamDesk.Database.Provider.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasPinned) {
          Pinned = other.Pinned;
        }
        if (other.subProvider_.Count != 0) {
          result.subProvider_.Add(other.subProvider_);
        }
        if (other.streams_.Count != 0) {
          result.streams_.Add(other.streams_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_providerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _providerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 26: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 32: {
              result.hasPinned = input.ReadBool(ref result.pinned_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.subProvider_, global::StreamDesk.Database.Provider.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.streams_, global::StreamDesk.Database.Stream.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasPinned {
        get { return result.hasPinned; }
      }
      public bool Pinned {
        get { return result.Pinned; }
        set { SetPinned(value); }
      }
      public Builder SetPinned(bool value) {
        PrepareBuilder();
        result.hasPinned = true;
        result.pinned_ = value;
        return this;
      }
      public Builder ClearPinned() {
        PrepareBuilder();
        result.hasPinned = false;
        result.pinned_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.Provider> SubProviderList {
        get { return PrepareBuilder().subProvider_; }
      }
      public int SubProviderCount {
        get { return result.SubProviderCount; }
      }
      public global::StreamDesk.Database.Provider GetSubProvider(int index) {
        return result.GetSubProvider(index);
      }
      public Builder SetSubProvider(int index, global::StreamDesk.Database.Provider value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subProvider_[index] = value;
        return this;
      }
      public Builder SetSubProvider(int index, global::StreamDesk.Database.Provider.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subProvider_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSubProvider(global::StreamDesk.Database.Provider value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subProvider_.Add(value);
        return this;
      }
      public Builder AddSubProvider(global::StreamDesk.Database.Provider.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subProvider_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSubProvider(scg::IEnumerable<global::StreamDesk.Database.Provider> values) {
        PrepareBuilder();
        result.subProvider_.Add(values);
        return this;
      }
      public Builder ClearSubProvider() {
        PrepareBuilder();
        result.subProvider_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.Stream> StreamsList {
        get { return PrepareBuilder().streams_; }
      }
      public int StreamsCount {
        get { return result.StreamsCount; }
      }
      public global::StreamDesk.Database.Stream GetStreams(int index) {
        return result.GetStreams(index);
      }
      public Builder SetStreams(int index, global::StreamDesk.Database.Stream value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.streams_[index] = value;
        return this;
      }
      public Builder SetStreams(int index, global::StreamDesk.Database.Stream.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.streams_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStreams(global::StreamDesk.Database.Stream value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.streams_.Add(value);
        return this;
      }
      public Builder AddStreams(global::StreamDesk.Database.Stream.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.streams_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStreams(scg::IEnumerable<global::StreamDesk.Database.Stream> values) {
        PrepareBuilder();
        result.streams_.Add(values);
        return this;
      }
      public Builder ClearStreams() {
        PrepareBuilder();
        result.streams_.Clear();
        return this;
      }
    }
    static Provider() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamDeskDatabase : pb::GeneratedMessage<StreamDeskDatabase, StreamDeskDatabase.Builder> {
    private StreamDeskDatabase() { }
    private static readonly StreamDeskDatabase defaultInstance = new StreamDeskDatabase().MakeReadOnly();
    private static readonly string[] _streamDeskDatabaseFieldNames = new string[] { "chatEmbeds", "creator", "description", "name", "root", "streamEmbeds" };
    private static readonly uint[] _streamDeskDatabaseFieldTags = new uint[] { 50, 18, 26, 10, 34, 42 };
    public static StreamDeskDatabase DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamDeskDatabase DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamDeskDatabase ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamDeskDatabase__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamDeskDatabase, StreamDeskDatabase.Builder> InternalFieldAccessors {
      get { return global::StreamDesk.Database.StreamDesk.internal__static_StreamDesk_Database_StreamDeskDatabase__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int CreatorFieldNumber = 2;
    private bool hasCreator;
    private string creator_ = "";
    public bool HasCreator {
      get { return hasCreator; }
    }
    public string Creator {
      get { return creator_; }
    }
    
    public const int DescriptionFieldNumber = 3;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int RootFieldNumber = 4;
    private bool hasRoot;
    private global::StreamDesk.Database.Provider root_;
    public bool HasRoot {
      get { return hasRoot; }
    }
    public global::StreamDesk.Database.Provider Root {
      get { return root_ ?? global::StreamDesk.Database.Provider.DefaultInstance; }
    }
    
    public const int StreamEmbedsFieldNumber = 5;
    private pbc::PopsicleList<global::StreamDesk.Database.StreamEmbed> streamEmbeds_ = new pbc::PopsicleList<global::StreamDesk.Database.StreamEmbed>();
    public scg::IList<global::StreamDesk.Database.StreamEmbed> StreamEmbedsList {
      get { return streamEmbeds_; }
    }
    public int StreamEmbedsCount {
      get { return streamEmbeds_.Count; }
    }
    public global::StreamDesk.Database.StreamEmbed GetStreamEmbeds(int index) {
      return streamEmbeds_[index];
    }
    
    public const int ChatEmbedsFieldNumber = 6;
    private pbc::PopsicleList<global::StreamDesk.Database.ChatEmbed> chatEmbeds_ = new pbc::PopsicleList<global::StreamDesk.Database.ChatEmbed>();
    public scg::IList<global::StreamDesk.Database.ChatEmbed> ChatEmbedsList {
      get { return chatEmbeds_; }
    }
    public int ChatEmbedsCount {
      get { return chatEmbeds_.Count; }
    }
    public global::StreamDesk.Database.ChatEmbed GetChatEmbeds(int index) {
      return chatEmbeds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasCreator) return false;
        if (!hasDescription) return false;
        if (!hasRoot) return false;
        if (!Root.IsInitialized) return false;
        foreach (global::StreamDesk.Database.StreamEmbed element in StreamEmbedsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::StreamDesk.Database.ChatEmbed element in ChatEmbedsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamDeskDatabaseFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasCreator) {
        output.WriteString(2, field_names[1], Creator);
      }
      if (hasDescription) {
        output.WriteString(3, field_names[2], Description);
      }
      if (hasRoot) {
        output.WriteMessage(4, field_names[4], Root);
      }
      if (streamEmbeds_.Count > 0) {
        output.WriteMessageArray(5, field_names[5], streamEmbeds_);
      }
      if (chatEmbeds_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], chatEmbeds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasCreator) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Creator);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Description);
        }
        if (hasRoot) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Root);
        }
        foreach (global::StreamDesk.Database.StreamEmbed element in StreamEmbedsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::StreamDesk.Database.ChatEmbed element in ChatEmbedsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamDeskDatabase ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamDeskDatabase ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamDeskDatabase ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamDeskDatabase ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamDeskDatabase MakeReadOnly() {
      streamEmbeds_.MakeReadOnly();
      chatEmbeds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamDeskDatabase prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamDeskDatabase, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamDeskDatabase cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamDeskDatabase result;
      
      private StreamDeskDatabase PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamDeskDatabase original = result;
          result = new StreamDeskDatabase();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamDeskDatabase MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StreamDesk.Database.StreamDeskDatabase.Descriptor; }
      }
      
      public override StreamDeskDatabase DefaultInstanceForType {
        get { return global::StreamDesk.Database.StreamDeskDatabase.DefaultInstance; }
      }
      
      public override StreamDeskDatabase BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamDeskDatabase) {
          return MergeFrom((StreamDeskDatabase) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamDeskDatabase other) {
        if (other == global::StreamDesk.Database.StreamDeskDatabase.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasCreator) {
          Creator = other.Creator;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasRoot) {
          MergeRoot(other.Root);
        }
        if (other.streamEmbeds_.Count != 0) {
          result.streamEmbeds_.Add(other.streamEmbeds_);
        }
        if (other.chatEmbeds_.Count != 0) {
          result.chatEmbeds_.Add(other.chatEmbeds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamDeskDatabaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamDeskDatabaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasCreator = input.ReadString(ref result.creator_);
              break;
            }
            case 26: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 34: {
              global::StreamDesk.Database.Provider.Builder subBuilder = global::StreamDesk.Database.Provider.CreateBuilder();
              if (result.hasRoot) {
                subBuilder.MergeFrom(Root);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Root = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.streamEmbeds_, global::StreamDesk.Database.StreamEmbed.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.chatEmbeds_, global::StreamDesk.Database.ChatEmbed.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasCreator {
        get { return result.hasCreator; }
      }
      public string Creator {
        get { return result.Creator; }
        set { SetCreator(value); }
      }
      public Builder SetCreator(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = value;
        return this;
      }
      public Builder ClearCreator() {
        PrepareBuilder();
        result.hasCreator = false;
        result.creator_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasRoot {
       get { return result.hasRoot; }
      }
      public global::StreamDesk.Database.Provider Root {
        get { return result.Root; }
        set { SetRoot(value); }
      }
      public Builder SetRoot(global::StreamDesk.Database.Provider value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoot = true;
        result.root_ = value;
        return this;
      }
      public Builder SetRoot(global::StreamDesk.Database.Provider.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoot = true;
        result.root_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoot(global::StreamDesk.Database.Provider value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoot &&
            result.root_ != global::StreamDesk.Database.Provider.DefaultInstance) {
            result.root_ = global::StreamDesk.Database.Provider.CreateBuilder(result.root_).MergeFrom(value).BuildPartial();
        } else {
          result.root_ = value;
        }
        result.hasRoot = true;
        return this;
      }
      public Builder ClearRoot() {
        PrepareBuilder();
        result.hasRoot = false;
        result.root_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.StreamEmbed> StreamEmbedsList {
        get { return PrepareBuilder().streamEmbeds_; }
      }
      public int StreamEmbedsCount {
        get { return result.StreamEmbedsCount; }
      }
      public global::StreamDesk.Database.StreamEmbed GetStreamEmbeds(int index) {
        return result.GetStreamEmbeds(index);
      }
      public Builder SetStreamEmbeds(int index, global::StreamDesk.Database.StreamEmbed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.streamEmbeds_[index] = value;
        return this;
      }
      public Builder SetStreamEmbeds(int index, global::StreamDesk.Database.StreamEmbed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.streamEmbeds_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStreamEmbeds(global::StreamDesk.Database.StreamEmbed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.streamEmbeds_.Add(value);
        return this;
      }
      public Builder AddStreamEmbeds(global::StreamDesk.Database.StreamEmbed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.streamEmbeds_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStreamEmbeds(scg::IEnumerable<global::StreamDesk.Database.StreamEmbed> values) {
        PrepareBuilder();
        result.streamEmbeds_.Add(values);
        return this;
      }
      public Builder ClearStreamEmbeds() {
        PrepareBuilder();
        result.streamEmbeds_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::StreamDesk.Database.ChatEmbed> ChatEmbedsList {
        get { return PrepareBuilder().chatEmbeds_; }
      }
      public int ChatEmbedsCount {
        get { return result.ChatEmbedsCount; }
      }
      public global::StreamDesk.Database.ChatEmbed GetChatEmbeds(int index) {
        return result.GetChatEmbeds(index);
      }
      public Builder SetChatEmbeds(int index, global::StreamDesk.Database.ChatEmbed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.chatEmbeds_[index] = value;
        return this;
      }
      public Builder SetChatEmbeds(int index, global::StreamDesk.Database.ChatEmbed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.chatEmbeds_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChatEmbeds(global::StreamDesk.Database.ChatEmbed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.chatEmbeds_.Add(value);
        return this;
      }
      public Builder AddChatEmbeds(global::StreamDesk.Database.ChatEmbed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.chatEmbeds_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChatEmbeds(scg::IEnumerable<global::StreamDesk.Database.ChatEmbed> values) {
        PrepareBuilder();
        result.chatEmbeds_.Add(values);
        return this;
      }
      public Builder ClearChatEmbeds() {
        PrepareBuilder();
        result.chatEmbeds_.Clear();
        return this;
      }
    }
    static StreamDeskDatabase() {
      object.ReferenceEquals(global::StreamDesk.Database.StreamDesk.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
